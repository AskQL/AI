name: Build and Deploy Executables

on:
  push:
    tags:
      - 'v*' # 'v'로 시작하는 태그가 푸시될 때 실행

jobs:
  # 1단계: 각 OS에서 실행 파일을 빌드하는 잡
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest] # 여러 OS에서 동시에 실행
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # OS에 따라 실행 파일 이름을 동적으로 설정
      - name: Set executable name
        id: set_name
        shell: bash # 윈도우에서도 bash 셸을 사용하도록 통일하여 오류 방지
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            echo "EXE_NAME=health_checker" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" == "Windows" ]; then
            echo "EXE_NAME=health_checker.exe" >> $GITHUB_ENV
          fi

      # PyInstaller로 실행 파일 빌드
      - name: Build executable with PyInstaller
        run: pyinstaller src/main.py --name ${{ env.EXE_NAME }} --onefile --noconsole

      # 빌드된 파일을 아티팩트로 업로드하여 다음 잡에서 사용
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ runner.os }}
          path: dist/${{ env.EXE_NAME }}

  # 2단계: 빌드된 실행 파일들을 Front 레포지토리에 배포하는 잡
  deploy:
    needs: build # build 잡이 성공해야 실행됨
    runs-on: ubuntu-latest
    steps:
      # Front 레포지토리의 develop 브랜치를 체크아웃
      - name: Checkout Front Repository
        uses: actions/checkout@v4
        with:
          repository: AskQL/Front
          token: ${{ secrets.PAT_FOR_FRONT_REPO }}
          ref: develop # 배포할 브랜치를 develop으로 변경

      # build 잡에서 업로드한 모든 아티팩트 다운로드
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # artifacts 폴더에 모든 아티팩트를 다운로드

      # 다운로드한 파일들을 올바른 위치로 이동
      - name: Organize files
        run: |
          mkdir -p resources/mac resources/win
          mv artifacts/executable-macOS/health_checker resources/mac/
          mv artifacts/executable-Windows/health_checker.exe resources/win/

      # 변경 사항을 커밋하고 푸시
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'actions@github.com'
          git add .
          # 변경 사항이 있을 때만 커밋 및 푸시
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            git commit -m "Deploy AI executables for ${{ github.ref_name }}"
            git push
          fi
